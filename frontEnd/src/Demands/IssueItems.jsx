import React, { useState,useEffect } from 'react';
import { Second } from './DemandForm';
import { BaseUrl } from '../BaseUrl';
import axios from 'axios'
const IssueItems = () => {
  const [step, setStep] = useState(1);
  const userName = JSON.parse(localStorage.getItem('userName'));
  const [formData, setFormData] = useState({
    userName: userName,
    description: '',
    quantities: {}, 
  });
  const handleNext = () => {
    if (step === 1 && !formData.description) {
      alert('Description is required!');
      return;
    }
    if (step === 2 && (!formData.selectedProducts || formData.selectedProducts.length === 0)) {
      alert('Please select at least one product!');
      return;
    }

    setStep(step + 1);
  };

  const handlePrevious = () => {
    setStep(step - 1);
  };

  const handleSubmit = async(e) => {
    e.preventDefault();
    try{
    console.log('Form Submitted:', formData);
    const response = await axios.post(`${BaseUrl}/demand/post`,formData);
    console.log(response.data.message);
    alert('Demand Successfully Generated')
    clearFields();
    }
    catch(error){
        console.log(error)
        alert("Error in Submitting")
    }
  };

  const handleChange = (field, value) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  const handleQuantityChange = (product, quantity) => {
    setFormData((prev) => ({
      ...prev,
      quantities: {
        ...prev.quantities,
        [product]: quantity, 
      },
    }));
  };

  const clearFields = () => {
    setFormData({
      userName:userName,
      description: '',
      quantities: {},
    });
    setStep(1);
  };

  return (
    <>
      {step === 1 && (
        <div className="bg-white p-8 rounded-lg shadow-md w-3/4 mx-auto mt-10">
          <div className="flex justify-between mb-6">
            <h1 className="text-2xl font-semibold text-gray-900">Demand For Issue Items</h1>
          </div>
          <h2 className="text-xl text-gray-700 mb-4">Step 1: Demand Details</h2>
          <form className="space-y-6">
    
            <div className="flex flex-col">
              <label className="text-gray-600">Generated By:</label>
              <input
                type="text"
                readOnly
                placeholder="User"
                value={formData.userName}
                className="p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
              />
            </div>
            <div className="flex flex-col">
              <label className="text-gray-600">Description:</label>
              <textarea
                name="description"
                value={formData.description}
                rows="4"
                cols="60"
                onChange={(e) => handleChange('description', e.target.value)}
                className="p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 resize-none"
              />
            </div>
            <div className="flex justify-between">
              <button
                type="button"
                onClick={clearFields}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition duration-200"
              >
                Cancel
              </button>
              <button
                type="button"
                onClick={handleNext}
                className="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition duration-200"
              >
                Next
              </button>
            </div>
          </form>
        </div>
      )}

      {step === 2 && (
        <div className="bg-white p-8 rounded-lg shadow-md w-3/4 mx-auto mt-10">
          <Second
            onSelectProducts={(selectedProducts) => {
              handleChange('selectedProducts', selectedProducts);
            }}
          />
          <div className="flex justify-between mt-4">
            <button
              type="button"
              onClick={handlePrevious}
              className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition duration-200"
            >
              Previous
            </button>
            <button
              type="button"
              onClick={handleNext}
              className="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition duration-200"
            >
              Next
            </button>
          </div>
        </div>
      )}

      {step === 3 && (
        <div className="bg-white p-8 rounded-lg shadow-md w-3/4 mx-auto mt-10">
          <div className="flex flex-col justify-center items-center">
            <h2 className="text-xl text-gray-700 mb-4">Step 3: Enter Quantity</h2>
            <p className="text-gray-600 mb-4">Selected Product(s): {formData.selectedProducts.length}</p>
            {formData.selectedProducts.map((product, index) => (
              <div key={index} className="flex flex-col mb-4">
                <label className="text-gray-600">Quantity for Product {index+1}:</label>
                <input
                  type="number"
                  min="1"
                  value={formData.quantities[product] } 
                  onChange={(e) => handleQuantityChange(product, e.target.value)}
                  className="p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                />
              </div>
            ))}
            <div className="flex justify-between mt-4">
              <button
                type="button"
                onClick={handlePrevious}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition duration-200"
              >
                Previous
              </button>
              <button
                type="button"
                onClick={handleSubmit}
                className="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition duration-200"
              >
                Submit
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default IssueItems;
